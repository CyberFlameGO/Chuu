package core.music.sources.youtube.webscrobbler.processers;

import com.sedmelluq.discord.lavaplayer.tools.JsonBrowser;
import core.music.sources.youtube.webscrobbler.YoutubeFilters;

import java.util.List;

public class ChapterProcesser implements YtProcessser {
    private static final String ytDescFirstLine = "Provided to YouTube";
    private static final String ytDescLastLine = "Auto-generated by YouTube.";
    private static final String ytDescSeparator = " Â· ";
    private static final YtSingleProcessser titleProcesser = new TitleProcesser();
    private static final YtSingleProcessser descriptionProcesser = new DescriptionProcesser();

    private static List<Chapter> findChapters(JsonBrowser details) {

        return details.values().stream().filter(t -> {
            JsonBrowser response = t.get("response");
            return !response.isNull() && !response.get("playerOverlays").isNull();
        }).findFirst().map(t ->
                t.get("response")
                        .get("playerOverlays")
                        .get("playerOverlayRenderer")
                        .get("decoratedPlayerBarRenderer")
                        .get("decoratedPlayerBarRenderer")
                        .get("playerBar")
                        .get("multiMarkersPlayerBarRenderer")
                        .get("markersMap").index(0)
                        .get("value").get("chapters").values()
                        .stream()
                        .map(x -> x.get("chapterRenderer"))
                        .map(z -> new Chapter(z.get("title").get("simpleText").safeText(), z.get("timeRangeStartMillis").as(Long.class)))
                        .toList())
                .orElse(null);
    }

    @Override
    public List<Processed> process(JsonBrowser details, JsonBrowser main) {
        List<Chapter> chapters = findChapters(main);
        if (chapters == null || chapters.isEmpty()) {
            return null;
        }
        Processed process = descriptionProcesser.processSingle(details, main);
        if (process == null) {
            process = titleProcesser.processSingle(details, main);
            if (process != null) {
                // If its in title we assume the splitted song name is the album
                process = new Processed(process.artist(), process.song(), null);
            }
        }
        if (process == null) {
            process = new Processed("unknown", "unknown", "unknown");
        }
        Processed finalProcess = process;
        List<Processed> processeds = chapters.stream().map(t -> t.withName(YoutubeFilters.doFilters(t.name))).map(t -> {
            Processed split = TitleProcesser.splitArtistTrack(t.name);
            if (split != null) {
                return new Processed(split.artist(), finalProcess.album(), split.song(), t.ms);
            }
            return new Processed(finalProcess.artist(), finalProcess.album(), t.name, t.ms);
        }).toList();
        long count = processeds.stream().map(Processed::artist).distinct().count();
        if (count > processeds.size() / 2f) {
            processeds = processeds.stream().map(z -> new Processed(z.artist(),
                    null,
                    z.song(), z.msStart()
            )).toList();
        }
        return processeds;
    }

    public record Chapter(String name, long ms) {

        public Chapter withName(String name) {
            return new Chapter(name, ms);
        }
    }
}
